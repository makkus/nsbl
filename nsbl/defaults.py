# -*- coding: utf-8 -*-

from __future__ import absolute_import, division, print_function, unicode_literals

import os

from frkl.defaults import *
from frkl.processors import (
    EnsurePythonObjectProcessor,
    EnsureUrlProcessor,
    FrklProcessor,
    UrlAbbrevProcessor,
)

# from frkl import CHILD_MARKER_NAME, DEFAULT_LEAF_NAME, DEFAULT_LEAFKEY_NAME, KEY_MOVE_MAP_NAME, OTHER_KEYS_NAME, \
# UrlAbbrevProcessor, EnsureUrlProcessor, EnsurePythonObjectProcessor, FrklProcessor, \
# IdProcessor, dict_merge, Frkl

# stem key for inventory
ENVS_KEY = "envs"
# meta info for groups/hosts (contains for example 'hosts' for groups)
ENV_META_KEY = "meta"
# name of the group/host
ENV_NAME_KEY = "name"
# type of the environemnt (either group or host)
ENV_TYPE_KEY = "type"
# under meta key, lists hosts of a group
ENV_HOSTS_KEY = "hosts"
# under meta key, lists sub-groups of a group, or which groups a host is member is
ENV_GROUPS_KEY = "groups"
# vars for a host/group
VARS_KEY = "vars"
# tasks for a hosts/group, used to create playbooks
TASKS_KEY = "tasks"

# meta infor for tasks (e.g. 'become')
TASKS_META_KEY = "meta"
# name of the task, can be internal or external role, or an ansible module
TASK_META_NAME_KEY = "name"
# name that the role has, used in the playbook, added automatically according to the type of task that is processed
ROLE_NAME_KEY = "ansible-role"
# the type of task
TASK_TYPE_KEY = "task-type"
# key to indicate whether a task/role should be executed with superuser privileges
TASK_BECOME_KEY = "become"
# key to tell nsbl which variable keys are valid if the type is ansible module. ansible modules don't like getting fed keys that are not related to them
TASK_ALLOWED_VARS_KEY = "allowed_vars"
# key to indicate which role dependencies should be added for the ansible environment to be created
TASK_ROLES_KEY = "task-roles"
TASK_DYN_ROLE_DETAILS = "task-dyn-role-details"
# key to indicate allowed keys for an ansible module
VAR_KEYS_KEY = "var-keys"
# name that gets used by ansible, either a module name, or a role name
TASK_NAME_KEY = "task-name"
# (optional) short description of the task
TASK_DESC_KEY = "task-desc"
# name to indicate to use the ansible 'with_items' directive
TASK_WITH_ITEMS_KEY = "with_items"
# id of the task within the task group
TASK_ID_KEY = "_task_id"
# id of the roles of the current task
ROLE_ID_KEY = "_role_id"
# id of the environment tasks are run in
ENV_ID_KEY = "_env_id"
# id of the task within a dynamic role
DYN_TASK_ID_KEY = "_dyn_task_id"
DEFAULT_KEY_KEY = "default-key"
SPLIT_KEY_KEY = "split-key"
WITH_ITEMS_KEY = "with_items"
# indicator for task type internal role (meaning, a role that is in one of the trusted role repos)
INT_ROLE_TASK_TYPE = "int_role"
# indicator for task type external role
EXT_ROLE_TASK_TYPE = "ext_role"
# indicator for task type autogenerated dynamic role (out of DYN_TASK_TYPEs)
DYN_ROLE_TYPE = "dyn_role"
# indicator for task type ansible module
TASK_TASK_TYPE = "ansible-task"

ROLE_TASK_TYPE = "ansible-role"
MODULE_TASK_TYPE = "ansible-module"
TASK_LIST_TASK_TYPE = "tasklist"

ADD_TYPE_TASK_LIST = "TASK_LIST"
ADD_TYPE_ROLE = "ROLE"
ADD_TYPE_CALLBACK = "CALLBACK_PLUGIN"
ADD_TYPE_ACTION = "ACTION_PLUGIN"
ADD_TYPE_LIBRARY = "LIBRARY_PLUGIN"
ADD_TYPE_FILTER = "FILTER_PLUGIN"
ADD_FILE_TYPES = [
    ADD_TYPE_TASK_LIST,
    ADD_TYPE_ROLE,
    ADD_TYPE_CALLBACK,
    ADD_TYPE_ACTION,
    ADD_TYPE_LIBRARY,
    ADD_TYPE_FILTER,
]

# key to indicate what the generated role should be called
ROLE_NAME_KEY = "role-name"
# filename that contains meta information for internal roles
ROLE_META_FILENAME = "meta.yml"
# path where nsbl default roles are located
DEFAULT_ROLES_PATH = os.path.join(
    os.path.dirname(__file__), "external", "default-roles"
)
# default task description filename
TASK_DESC_DEFAULT_FILENAME = "task-aliases.yml"
ANSIBLE_ROLE_CACHE_DIR = os.path.expanduser("~/.cache/ansible-roles")

LOCAL_ROLE_TYPE = "local"
REMOTE_ROLE_TYPE = "remote"

NSBL_TASKS_TEMPLATE_INIT = {"use_environment_vars": True, "use_context": True}

ID_NAME = "id"
NSBL_TASKS_ID_INIT = {"id_key": TASKS_META_KEY, "id_name": ID_NAME}

ENV_TYPE_HOST = "host"
ENV_TYPE_GROUP = "group"
DEFAULT_ENV_TYPE = ENV_TYPE_GROUP

# default timeout when the freckle password option is used
DEFAULT_TIMEOUT = 36000

# tasks that emit 'nsbl'-specific events: nsbl_item_started, nsbl_item_ok, nsbl_item_failed
NSBLIZED_TASKS = ["install"]

DEFAULT_NSBL_TASKS_BOOTSTRAP_FORMAT = {
    CHILD_MARKER_NAME: "tasks",
    DEFAULT_LEAF_NAME: "task",
    DEFAULT_LEAFKEY_NAME: "name",
    KEY_MOVE_MAP_NAME: {"*": ("vars", "default")},
    "use_context": True,
}

DEFAULT_NSBL_TASKS_BOOTSTRAP_CHAIN = [
    FrklProcessor(**DEFAULT_NSBL_TASKS_BOOTSTRAP_FORMAT)
]

# bootstrap frkl processor chain for creating the inventory hosts/groups lists
NSBL_INVENTORY_BOOTSTRAP_FORMAT = {
    CHILD_MARKER_NAME: ENVS_KEY,
    DEFAULT_LEAF_NAME: ENV_META_KEY,
    DEFAULT_LEAFKEY_NAME: ENV_NAME_KEY,
    OTHER_KEYS_NAME: [VARS_KEY, TASKS_KEY],
    KEY_MOVE_MAP_NAME: VARS_KEY,
}
# bootstrap chain used for creating the inventory
NSBL_INVENTORY_BOOTSTRAP_CHAIN = [
    UrlAbbrevProcessor(),
    EnsureUrlProcessor(),
    EnsurePythonObjectProcessor(),
    FrklProcessor(**NSBL_INVENTORY_BOOTSTRAP_FORMAT),
]

ANSIBLE_TASK_KEYWORDS = [
    "any_errors_fatal",
    "async",
    "become",
    "become_flags",
    "become_method",
    "become_user",
    "changed_when",
    "check_mode",
    "connection",
    "debugger",
    "delay",
    "delegate_facts",
    "delegate_to",
    "diff",
    "environment",
    "failed_when",
    "ignore_errors",
    "loop",
    "loop_control",
    "name",
    "no_log",
    "notify",
    "poll",
    "port",
    "register",
    "remote_user",
    "retries",
    "run_once",
    "tags",
    "until",
    "when",
]


# global vars that may be changed
DEFAULT_TASK_LIST_BASE_PATH = os.path.join(
    os.path.expanduser("~"), ".nsbl", "task-lists"
)
