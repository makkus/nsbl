# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

  config.vm.box = "fujimakishouten/debian-stretch64"
  config.vm.network "private_network", type: "dhcp"

  config.vm.network "forwarded_port", guest: 8001, host: 8001

  config.vm.synced_folder ".", "/vagrant", id: "vagrant"
  config.vm.synced_folder "../../", "/nsbl", id: "nsbl"
  config.vm.synced_folder "../../../frkl", "/frkl", id: "frkl"
  config.vm.synced_folder "../../../lucify", "/lucify", id: "lucify"
  config.vm.synced_folder "../../../luci", "/luci", id: "luci"
  config.vm.synced_folder "../../../lupkg", "/lupkg", id: "lupkg"
  config.vm.synced_folder "../../../frutils", "/frutils", id: "frutils"
  config.vm.synced_folder "../../../repos", "/repos", id: "repos"


  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false
    # Customize the amount of memory on the VM:
    vb.memory = "2048"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
#  config.vm.provision "shell", privileged: false, inline: <<-SHELL
#     sudo apt-get update
#     sudo apt-get install -y netcat net-tools
#     export DEB_PROXY_PORT=8000
#     echo "HEAD /" | nc $(sudo route -n | awk '/^0.0.0.0/ {print $2}') ${DEB_PROXY_PORT} | grep squid-deb-proxy && (echo "Acquire::http::Proxy \"http://$(sudo route -n | awk '/^0.0.0.0/ {print $2}'):${DEB_PROXY_PORT}\";" | sudo tee /etc/apt/apt.conf.d/30proxy) && (echo "Acquire::http::Proxy::ppa.launchpad.net DIRECT;" | sudo tee -a /etc/apt/apt.conf.d/30proxy) || echo "No squid-deb-proxy detected on VM host"
#  SHELL
  # config.vm.provision :shell, path: "vagrant_bootstrap.sh", privileged: false

end
